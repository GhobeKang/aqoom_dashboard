{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["http","defaults","baseURL","App","useState","chatdata","setChatdata","chatStatusData","setChatStatusData","userIncreasedData","setUserIncreasedData","chatIncreasedData","setChatIncreasedData","messageHandling","setMessageHandling","COLORS","fullWidth","window","screen","width","useEffect","getChatInfos","getSupergroupState","getUserIncreasingData","getChatIncreasingData","getMessageHandling","get","then","res","data","type","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","className","height","verticalAlign","dataKey","nameKey","label","labelLine","map","entry","key","length","style","display","margin","top","right","left","bottom","name","stroke","dot","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6bf986c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport http from 'axios';\nimport { PieChart, Pie, Tooltip, Cell, Legend, LineChart, Line, XAxis, YAxis} from 'recharts';\nimport './App.css';\n\n// http.defaults.baseURL = 'http://localhost:4000/api/dashboard';\nhttp.defaults.baseURL = 'https://hysoop.com/api/dashboard'\n\nfunction App() {\n  const [chatdata, setChatdata] = useState([]);\n  const [chatStatusData, setChatStatusData] = useState([]);\n  const [userIncreasedData, setUserIncreasedData] = useState([]);\n  const [chatIncreasedData, setChatIncreasedData] = useState([]);\n  const [messageHandling, setMessageHandling] = useState([]);\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n  const fullWidth = window.screen.width;\n\n  useEffect(() => {\n    getChatInfos();\n    getSupergroupState();\n    getUserIncreasingData();\n    getChatIncreasingData();\n    getMessageHandling();\n  }, [])\n\n  const getSupergroupState = () => {\n    http.get('/get-supergroup-state')\n      .then((res) => {\n        setChatStatusData(res.data);\n      })\n  }\n\n  const getChatInfos = () => {\n    http.get('/getchat')\n      .then((res) => {\n        setChatdata(res.data);\n      })\n  }\n  const getUserIncreasingData = (type) => {\n    http.get('/get-user-amount')\n      .then((res) => {\n        setUserIncreasedData(res.data);\n      })\n  }\n  const getChatIncreasingData = (type) => {\n    http.get('/get-chat-amount')\n      .then((res) => {\n        setChatIncreasedData(res.data);\n      })\n  }\n  const getMessageHandling = () => {\n    http.get('/get-message-amount')\n      .then((res) => {\n        setMessageHandling(res.data)\n      })\n  }\n  const RADIAN = Math.PI / 180;\n  const renderCustomizedLabel = ({\n    cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n  }) => {\n     const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  \n    return (\n      <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>DASHBOARD</h2>\n      <div className=\"gap\"></div>\n      <div className=\"chart_chattype\">\n        <div className=\"gap\"></div>\n        <p>CHAT TYPES</p>\n        <PieChart width={fullWidth / 2} height={500}>\n          <Tooltip />\n          <Legend verticalAlign=\"top\" height={36}/>\n          <Pie data={chatdata} dataKey=\"cnt\" nameKey=\"type\" cx=\"50%\" cy=\"50%\" outerRadius={200} fill=\"#8884d8\" label={renderCustomizedLabel} labelLine={false}>\n            {\n              chatdata.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n            }\n          </Pie>\n        </PieChart>\n      </div>\n      \n      <div className=\"chart_supergroup\">\n        <div className=\"gap\"></div>\n        <p>SUPERGROUP STATUS</p>\n        <PieChart width={fullWidth / 2} height={500} style={{display: 'inline-block'}}>\n          <Tooltip />\n          <Legend verticalAlign=\"top\" height={36}/>\n          <Pie data={chatStatusData} dataKey=\"cnt\" nameKey=\"status\" cx=\"50%\" cy=\"50%\" outerRadius={200} fill=\"#8884d8\" label={renderCustomizedLabel} labelLine={false}>\n            {\n              chatStatusData.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)\n            }\n          </Pie>\n        </PieChart>\n      </div>\n\n      <div className=\"gap\"></div>\n      <p>USER 증가 추이</p>\n      <LineChart width={1500} height={500} data={userIncreasedData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        \n        <Tooltip />\n        <Legend verticalAlign=\"top\" height={36}/>\n        <Line name=\"user amount\" type=\"monotone\" dataKey=\"accumulated_cnt\" stroke=\"#ff7135\" dot={false} />\n      </LineChart>\n\n      <p>일별 USER 증가 현황</p>\n      <LineChart width={1500} height={500} data={userIncreasedData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        \n        <Tooltip />\n        <Legend verticalAlign=\"top\" height={36}/>\n        <Line name=\"user amount\" type=\"monotone\" dataKey=\"cnt_user\" stroke=\"#f0ba51\" dot={false} />\n      </LineChart>\n\n      <div className=\"gap\"></div>\n      <p>CHAT 증가 추이</p>\n      <LineChart width={1500} height={500} data={chatIncreasedData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        \n        <Tooltip />\n        <Legend verticalAlign=\"top\" height={36}/>\n        <Line name=\"total\" type=\"monotone\" dataKey=\"accumulated_cnt\" stroke=\"#f0ba51\" dot={false} />\n      </LineChart>\n\n      <p>일별 CHAT 증가 현황</p>\n      <LineChart width={1500} height={500} data={chatIncreasedData}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        \n        <Tooltip />\n        <Legend verticalAlign=\"top\" height={36}/>\n        <Line name=\"chat amount\" type=\"monotone\" dataKey=\"cnt_chat\" stroke=\"#ff7135\" dot={false} />\n      </LineChart>\n\n      <div className=\"gap\"></div>\n      <p>메세지 처리량 추이</p>\n      <LineChart width={1500} height={500} data={messageHandling}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n        <XAxis dataKey=\"date\" />\n        <YAxis />\n        \n        <Tooltip />\n        <Legend verticalAlign=\"top\" height={36}/>\n        <Line name=\"message amount\" type=\"monotone\" dataKey=\"cnt\" stroke=\"#e35984\" />\n      </LineChart>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}